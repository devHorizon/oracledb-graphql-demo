webpackJsonp([0xfb94cd7fb0fa],{1954:function(n,a){n.exports={data:{postBySlug:{html:'<a href="https://graphql.org/" target="_blank">\n<img alt="graphql logo" src="graphql-logo.png" width="80%" style="display:block;margin:auto;"/>\n</a>\n<blockquote style="font-size:2em;">\n<em style="padding-left:2em;">  "Ask not what you can do for your APIs. Ask what your APIs can do for you." \n</em>\n</blockquote>\n<ol>\n<li>What is GraphQL</li>\n<li>GraphQL Schemas and Types</li>\n<li>Queries </li>\n<li>Variables and Aliases and Fragments, Oh My!</li>\n<li>Mutations</li>\n<li>Introspection</li>\n</ol>\n<h4 id="what-graphql-is"><a href="#what-graphql-is" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What GraphQL <em>is</em></h4>\n<ul>\n<li>An API Specification (like <code class="language-text">REST</code>)</li>\n<li>A Query Language (like <code class="language-text">SQL</code>)</li>\n<li>A tool to solve problems</li>\n<li>New (released in 2015) [<a href="https://www.howtographql.com/basics/0-introduction/">5</a>]</li>\n</ul>\n<h4 id="what-graphql-isnt"><a href="#what-graphql-isnt" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What GraphQL <em>isn\'t</em></h4>\n<ul>\n<li>A piece of software </li>\n<li>Blockchain</li>\n<li>AI </li>\n</ul>\n<h3 id="the-graphql-schema-for-our-app"><a href="#the-graphql-schema-for-our-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The GraphQL Schema for our app</h3>\n<p>If you\'re used to RDBMS\'s this schema will look unusual, albeit the schema makes sense!\nThe corresponding definition is <a href="/about-oracle-db#our-apps-rdbs-schema">given as defined with SQL</a></p>\n<p>GraphQL\'s succint syntax allows for a level of expressiveness that language designers strive for and\nprogrammers love (which might be one reason it\'s catching on so quickly). The format is purposely very\nsimilar to <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> which is the <em>lingua franca</em> of web APIs. </p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql">type User <span class="token punctuation">{</span>\n    <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> <span class="token directive function">@unique</span>\n    <span class="token attr-name">email</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token attr-name">idEncoded</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token attr-name">fullName</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token attr-name">fullNameAnotherWay</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n    <span class="token attr-name">comments</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Comment<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n    <span class="token attr-name">following</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>User<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n    <span class="token attr-name">favNums</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Int<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n    <span class="token attr-name">numLegs</span><span class="token punctuation">:</span> Int<span class="token operator">!</span>\n    <span class="token attr-name">luckyNumber</span><span class="token punctuation">:</span> Int<span class="token operator">!</span>\n    <span class="token attr-name">writtenMaterial</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>AuthoredInterface<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\ntype Post <span class="token punctuation">{</span>\n    <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> <span class="token directive function">@unique</span>\n    <span class="token attr-name">body</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token attr-name">author</span><span class="token punctuation">:</span> User\n    <span class="token attr-name">authorId</span><span class="token punctuation">:</span> Int<span class="token operator">!</span>\n    <span class="token attr-name">comments</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Comment<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n    <span class="token attr-name">archived</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span>\n    <span class="token attr-name">createdAt</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\ntype Comment <span class="token punctuation">{</span>\n    <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> <span class="token directive function">@unique</span>\n    <span class="token attr-name">body</span><span class="token punctuation">:</span> String<span class="token operator">!</span> \n    <span class="token attr-name">likers</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>User<span class="token operator">!</span><span class="token punctuation">]</span><span class="token operator">!</span>\n    <span class="token attr-name">post</span><span class="token punctuation">:</span> Post<span class="token operator">!</span>\n    <span class="token attr-name">author</span><span class="token punctuation">:</span> User<span class="token operator">!</span>\n    <span class="token attr-name">authorId</span><span class="token punctuation">:</span> Int<span class="token operator">!</span>\n    <span class="token attr-name">archived</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span>\n    <span class="token attr-name">postId</span><span class="token punctuation">:</span> Int<span class="token operator">!</span>\n    <span class="token attr-name">createdAt</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n<span class="token punctuation">}</span>\n\ntype AuthoredInterface <span class="token punctuation">{</span>\n    <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span> <span class="token directive function">@unique</span>\n    <span class="token attr-name">body</span><span class="token punctuation">:</span> String<span class="token operator">!</span>\n    <span class="token attr-name">authorId</span><span class="token punctuation">:</span> Int<span class="token operator">!</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="graphql-query-language"><a href="#graphql-query-language" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GraphQL Query Language</h3>\n<p>If you haven\'t yet, start your app and head to <a href="http://localhost:3000/graphql">localhost:3000/graphql</a> to explore compare SQL and GraqhQL!</p>\n<p>In case you can\'t spin up our demo the community has provided similar running examples online!\nThere is an almost identical app running at <a href="https://join-monster.herokuapp.com/graphql">https://join-monster.herokuapp.com/graphql</a> which\ndoesn\'t use OracleDB as a backend but still showcases the same schema and modified GraphsiQL interface. [<a href="https://github.com/stems/join-monster-demo">5</a>]</p>\n<img src="graphisql-oracle-app.png" width="100%" style="display:block;margin:auto;"/>\n<p>GraphQL allows you to do all the operations routinely used by traditional REST APIs</p>\n<h4 id="queries"><a href="#queries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Queries</h4>\n<p>Just like a SQL query you can do selections. </p>\n<p>Let\'s <code class="language-text">SELECT</code> full name (generating it two different ways) and the body of any written material a user has written<br>\n<code class="language-text">FROM</code> the users table <code class="language-text">WHERE</code> the users id is 1</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token punctuation">{</span>\n user<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  fullName\n  fullNameAnotherWay\n  writtenMaterial<span class="token punctuation">{</span>\n    body\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>And GraphQL returns JSON!</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"fullName"</span><span class="token operator">:</span> <span class="token string">"Myrtie Hickle"</span><span class="token punctuation">,</span>\n      <span class="token property">"fullNameAnotherWay"</span><span class="token operator">:</span> <span class="token string">"Myrtie Hickle"</span><span class="token punctuation">,</span>\n      <span class="token property">"writtenMaterial"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"Dolores ea corrupti est qui repellat. Iste non quaerat autem earum consequatur ea id voluptatum."</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        ...\n        <span class="token punctuation">{</span>\n          <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"Use the online SCSI firewall, then you can generate the optical firewall!"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="variables-and-aliases-and-fragments-oh-my"><a href="#variables-and-aliases-and-fragments-oh-my" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Variables and Aliases and Fragments, Oh My!</h4>\n<p>Let\'s combine them in a pretty complex little query... we want all the information as above for two users, but\nVariables are self explanatory and aliases are just as the name suggests.the JSON key for each user should be different (that\'s the alias part).\nTake a quick look at the below photo and notice the "QUERY VARIABLES" tray. This may be collapsed on your GraphsiQL browser. </p>\n<img src="graphsiql-query-variables.png" width="100%" style="display:block;margin:auto;"/>\n<p>And the Query as text for your COPY+PASTE\'ing convenience </p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token keyword">fragment</span> foobar <span class="token keyword">on</span> User <span class="token punctuation">{</span>\n  fullName\n  fullNameAnotherWay\n  writtenMaterial<span class="token punctuation">{</span>\n    body\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">query</span> MyQuery<span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">:</span> Int<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token variable">$bar</span><span class="token punctuation">:</span> Int<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">numberOne</span><span class="token punctuation">:</span> user<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>foobar\n  <span class="token punctuation">}</span>\n  <span class="token attr-name">numberTwo</span><span class="token punctuation">:</span> user<span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>foobar\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Query Variables definition </p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"foo"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token property">"bar"</span><span class="token operator">:</span> <span class="token number">2</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Wow! the Result. Aliases and Variables are indispensable in SQL. I could get use to this "Fragments" too!<br>\nNotice that the keys for our users changed - now they are "numberOne" and "numberTwo"</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"numberOne"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"fullName"</span><span class="token operator">:</span> <span class="token string">"Myrtie Hickle"</span><span class="token punctuation">,</span>\n      <span class="token property">"fullNameAnotherWay"</span><span class="token operator">:</span> <span class="token string">"Myrtie Hickle"</span><span class="token punctuation">,</span>\n      <span class="token property">"writtenMaterial"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"Dolores ea corrupti est qui repellat. Iste non quaerat autem earum consequatur ea id voluptatum."</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        ...\n        <span class="token punctuation">{</span>\n          <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"Use the online SCSI firewall, then you can generate the optical firewall!"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"numberTwo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"fullName"</span><span class="token operator">:</span> <span class="token string">"Yasmine Rolfson"</span><span class="token punctuation">,</span>\n      <span class="token property">"fullNameAnotherWay"</span><span class="token operator">:</span> <span class="token string">"Yasmine Rolfson"</span><span class="token punctuation">,</span>\n      <span class="token property">"writtenMaterial"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"The HDD alarm is down, index the cross-platform card so we can compress the RAM card!"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        ...\n        <span class="token punctuation">{</span>\n          <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"If we transmit the transmitter, we can get to the HTTP driver through the mobile JBOD port!"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="mutations"><a href="#mutations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutations</h4>\n<p>If a GraphQL Query is analagous to a SQL <code class="language-text">SELECT</code> satement than think of a Mutation as an <code class="language-text">UPDATE</code></p>\n<h4 id="introspection"><a href="#introspection" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introspection</h4>\n<p>Introspection to get Schema definitions</p>\n<div class="gatsby-highlight">\n      <pre class="language-graphql"><code class="language-graphql"><span class="token punctuation">{</span>\n  __schema <span class="token punctuation">{</span>\n    types <span class="token punctuation">{</span>\n      name\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Which is super useful for developers unframiliar with your API</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"__schema"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Query"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        ...\n        <span class="token punctuation">{</span>\n          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"__DirectiveLocation"</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="is-that-it-no"><a href="#is-that-it-no" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Is that it? (no!)</h3>\n<p>This is by no means a comprehensive tour of GraphQL. Head over to the\n<a href="https://graphql.org/">official GraphQL Organization site</a> to start learning\nor continue our walk-through <a href="/about-oracle-db">about Oracle DB</a></p>',timeToRead:4,excerpt:"What is GraphQL GraphQL Schemas and Types Queries  Variables and Aliases and Fragments, Oh My! Mutations Introspection What GraphQL  is An…",frontmatter:{title:"About GraphQL"}},tableOfContents:{chapters:[{title:"Overview",entries:[{entry:{childMarkdownRemark:{fields:{slug:"/overview"},frontmatter:{title:"Overview"}}}}]},{title:"Running the Demo",entries:[{entry:{childMarkdownRemark:{fields:{slug:"/running-the-demo"},frontmatter:{title:"Running the Demo"}}}},{entry:{childMarkdownRemark:{fields:{slug:"/running-in-the-cloud"},frontmatter:{title:"Running in the Cloud"}}}},{entry:{childMarkdownRemark:{fields:{slug:"/running-with-docker"},frontmatter:{title:"Running with Docker"}}}}]},{title:"GraphQL & Oracle DB?",entries:[{entry:{childMarkdownRemark:{fields:{slug:"/about-graph-ql"},frontmatter:{title:"About GraphQL"}}}},{entry:{childMarkdownRemark:{fields:{slug:"/about-oracle-db"},frontmatter:{title:"About Oracle DB"}}}},{entry:{childMarkdownRemark:{fields:{slug:"/graph-ql-rest-sql"},frontmatter:{title:"GraphQL REST & SQL"}}}}]},{title:"Learn More",entries:[{entry:{childMarkdownRemark:{fields:{slug:"/learn-more"},frontmatter:{title:"Learn More"}}}}]},{title:"Summary",entries:[{entry:{childMarkdownRemark:{fields:{slug:"/summary"},frontmatter:{title:"Summary"}}}},{entry:{childMarkdownRemark:{fields:{slug:"/references"},frontmatter:{title:"References"}}}}]}]}},pathContext:{slug:"/about-graph-ql"}}}});
//# sourceMappingURL=path---about-graph-ql-6ef12426f3450263d496.js.map